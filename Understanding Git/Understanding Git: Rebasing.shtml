<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<link rel="stylesheet" type="text/css" href="Understanding%20Git:%20Rebasing_files/stylesheet.css">
<title>Understanding Git: Rebasing</title>
</head>
<body>



<div class="title">
<h1>Understanding Git: Rebasing</h1>
</div>

<!--
nav-header.shtml

Navigation bar, to be placed in header. Contains links to the basic sections of
this site.

-->
<div class="nav-header">

<div class="nav-header-top">
 <b>Navigation</b>
</div>

<div>
 <b><a href="http://www.sbf5.com/%7Ecduan/" alt="Home page">Home</a></b>
</div>

<div>
 <a href="http://www.sbf5.com/%7Ecduan/download/">Downloads</a>
</div>

<div>
 <a href="http://www.sbf5.com/%7Ecduan/technical/">Technical Writings</a>
</div>

<div>
 <a href="http://www.sbf5.com/%7Ecduan/writings/">Non-Technical Writings</a>
</div>

<div>
 <a href="http://www.sbf5.com/%7Ecduan/misc/">Miscellaneous</a>
</div>

<div>
 <a href="http://www.sbf5.com/%7Ecduan/links.shtml">Links</a>
</div>

<div>
 <a href="http://www.sbf5.com/%7Ecduan/nav-help.shtml">Help</a>
</div>

<div>
  <a href="http://cd2dc.tumblr.com/about">BBQ and Fried Chicken</a>
</div>

<script type="text/javascript"><!--
google_ad_client = "ca-pub-4775089164349825";
/* Ad */
google_ad_slot = "3363410592";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script>
<script type="text/javascript" src="Understanding%20Git:%20Rebasing_files/show_ads.js">
</script>

</div>


<div class="content">

<div class="sub-nav-header">
<span><a href="http://www.sbf5.com/%7Ecduan/technical/git/">Introduction</a></span>
<span><a href="http://www.sbf5.com/%7Ecduan/technical/git/git-1.shtml">1: Repositories</a></span>
<span><a href="http://www.sbf5.com/%7Ecduan/technical/git/git-2.shtml">2: Branching</a></span>
<span><a href="http://www.sbf5.com/%7Ecduan/technical/git/git-3.shtml">3: Merging</a></span>
<span><a href="http://www.sbf5.com/%7Ecduan/technical/git/git-4.shtml">4: Collaborating</a></span>
<span>5: Rebasing</span>
</div>

<h2>In This Section</h2>

<ul>
<li><a href="#rebasing">Rebasing</a></li>
<li><a href="#rebasing-practices">Common Rebasing Use Practices</a></li>
<li><a href="#moving-on">Moving On</a></li>
</ul>

<h2 id="rebasing">Rebasing</h2>

<p>Git offers a unique feature called <tt>rebasing</tt> as an alternative to
merging. Its syntax is:</p>

<blockquote><pre>git rebase [new-commit]
</pre></blockquote>

<p>When run, Git performs the following steps:</p>

<ul>
<li>Identifies each commit that is an ancestor of the current commit but not of
  [new-commit]. This can be thought of as a two-step process: first, find the
  common ancestor of [new-commit] and the current commit; call this the
  <i>ancestor commit</i>. Second, collect all the commits between the
  <i>ancestor commit</i> and the current commit.
</li><li>Determines what changed for each of those commits, and puts those changes
  aside.
</li><li>Sets the current head to point to [new-commit].
</li><li>For each of the changes set aside, replays that change onto the current head
  and creates a new commit.
</li></ul>

<p>The result is that HEAD, the current commit, is a descendant of [new-commit],
but it contains all the changes as if it had been merged with [new-commit].

</p><p>For example, imagine that a repository looks like:

</p><blockquote><pre>         +-------------- (D)
        /                 |
(A) -- (B) -- (C)         |
               |          |
             master  new-branch
                          |
                         HEAD
</pre></blockquote>

<p>Performing <tt>git rebase master</tt> would produce the following:

</p><blockquote><pre>                 +------ (E)
                /         |
(A) -- (B) -- (C)         |
               |          |
             master  new-branch
                          |
                         HEAD
</pre></blockquote>
<p>where (E) is a new commit that incorporates the changes between (B) and (D), but
reorganized to place those changes on (C).

</p><p>Rebase has the advantage that there is no merge commit created. However, because
HEAD is not a descendant of the pre-rebase HEAD commit, rebasing can be
problematic. For one thing, it means that a rebased head cannot be pushed to a
remote server, because it does not result in a fast forward merge. Moreover, it
results in a loss of information. It is no longer known that (D) was once on the
<i>new-branch</i> head. This results in a “changing of history” that
could confuse someone who already knows about commit (D).

</p><h2 id="rebasing-practices">Common Rebasing Use Practices</h2>

<p>Because of this danger of rebasing, it is best reserved for two situations.

</p><p>First, if you are developing a branch on your own and not sharing it with
anyone, you could rebase it to keep the branch up to date with respect to the
main branch. Then, when you finally merge your developed branch into the main
branch, it will be free of merge commits, because it will appear that your
development branch was a descendant of the main head. Moreover, the main branch
can move forward with a fast forward merge rather than a regular merge commit.

</p><p>Second, if you commit to a branch but that branch changes at the same time on a
remote machine, you can use rebase to shift your own commits, allowing you to
push your commits to the remote repository. From the example above:

</p><blockquote><pre>                                     +-- (D)
                                    /     |
(A) -- (B) -- (C)           (A) -- (B)    |
               |                          |
             master                     master

Your repository             Remote repository
</pre></blockquote>

<p>If you perform a <tt>fetch</tt>, your repository will look like this:

</p><blockquote><pre>         +-------------- (D)
        /                 |
(A) -- (B) -- (C)         |
               |          |
             master origin/master
</pre></blockquote>

<p>Now, assuming <i>master</i> is your current head, you run:

</p><blockquote><pre>git rebase origin/master
</pre></blockquote>

<p>And your repository will look like:

</p><blockquote><pre>          +------ (D) ------+
         /         |         \
(A) -- (B)         |         (E)
                   |          |
             origin/master  master
</pre></blockquote>

<p>Commit (E) contains the changes you made between commits (B) and (C), but now
commit (E) is a descendant of (D). This allows you to push your head
<i>master</i>, as a fast forward merge, to update <i>origin/master</i>.

</p><h2 id="moving-on">Moving On</h2>

<p>There are many more things possible with Git. The manual pages generally
document, in fairly good detail, the possible operations.</p>

<p>If you understand how the Git repository is a tree of commits and see how
operations like branching, merging, pushing, and pulling manipulate that tree,
then understanding other Git commands should not be difficult. You should be
able to visualize how any command will search or modify the tree and specify the
right commits on the tree for Git to operate on.</p>

<p>So, go forth and code!</p>

</div>


<div class="footer">

Copyright © 2000-2015 Charles Duan.<br>

My e-mail address is “website.comments” (without the quotes)
followed by an @ symbol, my first initial and last name concatenated, a dot, and
“com.”

</div>




</body></html>